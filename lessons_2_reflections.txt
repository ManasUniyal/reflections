What happens when you initialize a repository? Why do you need to do it?
Repository in general is a collection of related files. When we initialise a repository,
it becomes a git repository i.e. it now has it can now have it's own meta-data and previous
versions. By using the git init command, we create a normal repository into a git repository.

Staging area
Whenever we add a file to the staging area, git shows two classes of files, one which are 
changes to be commited. These are the files which have been added to the staging area and
the other are untracked files. These are the files in which changes have been made since the 
previous commit but have not yet been added to the staging area. 

How is the staging area different from the working directory and the repository? What value 
do you think it offers?
Working directory is the repository in which we work. The files of the working directory that
we add go to the staging area. The staging area facilitates us to add as many files as we want.
Once the files have been added to the staging area, they can be commited into the repository.

Git commit message style
The commit message can consist of four parts- the type, subject, body and footer. 
The type is contained within the title and can be one of these types:
-feat: a new feature
-fix: a bug fix
-docs: changes to documentation
-style: formatting, missing semi colons, etc; no code change
-refactor: refactoring production code
-test: adding tests, refactoring test; no production code change
-chore: updating build tasks, package manager configs, etc; no production code change
Subjects should be no greater than 50 characters, should begin with a capital letter and do not
end with a period. Use an imperative tone to describe what a commit does, rather than what it 
did. For example, use change; not changed or changes.

How can you use the staging area to make sure you have one commit per logical change?
Whenever we have to make a commit, the file(s) have to be added to the staging area. Then, we can
compare the files in the staging area with the files in the latest commit using the command 
git diff --staged. 

What are some situations when branches would be helpful in keeping your history organized? How would 
branches help?
When we want to make new experiments with the current version of the project or add new features to 
the existing project without making any changes to the stable version of the project, git branch can 
be used.

How do the diagrams help you visualize the branch structure?
The diagrams clearly depict when and on which commit each branch was made. Having a visual of the 
branches is the best way to understand them. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
When we merge two branches togeather, the two branches are replaced by a single branch having the files 
equivalent to two branches. When two branches are merged, we represent them by a togeather with the same
label.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros-
-The user is not bothered about the merges that are obvious.
-Takes less time and is reliable.
Cons-
-Whenever there is a conflict the merges have to be resolved manually.
-It is time consuming and prone to errors.