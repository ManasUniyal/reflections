What happens when you initialize a repository? Why do you need to do it?
Repository in general is a collection of related files. When we initialise a repository,
it becomes a git repository i.e. it now has it can now have it's own meta-data and previous
versions. By using the git init command, we create a normal repository into a git repository.

Staging area
Whenever we add a file to the staging area, git shows two classes of files, one which are 
changes to be commited. These are the files which have been added to the staging area and
the other are untracked files. These are the files in which changes have been made since the 
previous commit but have not yet been added to the staging area. 

How is the staging area different from the working directory and the repository? What value 
do you think it offers?
Working directory is the repository in which we work. The files of the working directory that
we add go to the staging area. The staging area facilitates us to add as many files as we want.
Once the files have been added to the staging area, they can be commited into the repository.

Git commit message style
The commit message can consist of four parts- the type, subject, body and footer. 
The type is contained within the title and can be one of these types:
feat: a new feature
fix: a bug fix
docs: changes to documentation
style: formatting, missing semi colons, etc; no code change
refactor: refactoring production code
test: adding tests, refactoring test; no production code change
chore: updating build tasks, package manager configs, etc; no production code change
-Subjects should be no greater than 50 characters, should begin with a capital letter and do not
 end with a period. Use an imperative tone to describe what a commit does, rather than what it 
 did. For example, use change; not changed or changes.